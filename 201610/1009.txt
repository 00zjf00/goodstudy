 Servlet的多线程机制
　
1.  变量的线性安全：这里的变量指字段和共享数据（如表单参数值）。

	将参数变量本地化。多线程并不共享局部变量，所以要尽可能地在servlet中使用局部变量。例如：String user=request.getParameter("user");

	使用同步块Synchronized，防止可能异步调用的代码块，这就意味着线程需要排队处理。但要注意在使用同步块的范围要尽可能的小，不要直接在sevice方法和响应方法上使用，这样会严重影响性能。

2.  属性的线性安全：ServletContext,HttpSession,ServletRequest对象中的属性。

    ServletContext（线程不安全）：ServletContext可以同时进行多线程读/写属性，线程是不安全的。要对属性的读写进行同步处理或进行深度Clone()。所以在Servlet上下文中要尽量少保存会被修改（写）的数据，可以使用其他的方式在多个Servlet中共享，比如使用单例模式处理共享数据。

	HttpSession（线程不安全）：HttpSession在用户会话期间存在，只能在处理属于同一个Session请求的线程中被访问，因此理论上访问Session对象的属性是线程安全的。但是当用户打开同属于同一个进程的浏览窗口，对这些窗口的访问属于同一个session，会出现多次请求，需要多个工作线程来处理，可能会造成多个线程同时读写操作。这时我们就需要对属性的读写进行同步处理：使用同步块或读/写器来处理。

	ServletRequest（线程安全）：对于每一个请求，由一个线程来执行，都会创建一个新的ServletRequest对象，所以ServletRequest只能在一个线程中被访问。注意：ServletRequest对象在service方法的范围内是有效的，不要试图在service方法结束后仍然保存访问请求对象的引用。

3.  不要在Servlet中创建自己的线程以完成某个功能：servlet本身就是多线程，再创建线程会导致问题复杂化，会带来线程安全的问题。
 
4.  在多个Servlet中对外部对象（比如文件）修改一定要加锁，做到互斥的访问。
 
5.  javax.servlet.SingleThreadModel接口是一个标识接口，如果一个servlet实现了这个接口，那么servlet容器将保证在一个时刻仅有一个线程可以在给定的servlet实例的service方法中执行，将其他所有请求进行排队。
 
6.  服务器可以使用多个实例来处理请求，代替单个实例的请求排队带来的效益问题。服务器创建一个Servlet类的多个Servlet实例组成的实例池，对于每个请求分配Servlet实例进行响应处理，之后放回到实例池中等待下此请求。这样就造成并发访问的问题。此时,局部变量(字段)也是安全的，但对于全局变量和共享数据是不安全的，需要进行同步处理。而对于这样多实例的情况SingleThreadModel接口并不能解决并发访问问题。


------------------------------------------------------------------------------------------------------------------------------------------
servletRequest request
getParameter()
getParameterValues()

HttpServletRequest
getRequestURI()
getQueryString()
getServletPath()***
